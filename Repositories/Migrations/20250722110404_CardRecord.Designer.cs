// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.DbContexts;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(BleTrackingDbContext))]
    [Migration("20250722110404_CardRecord")]
    partial class CardRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AlarmRecordTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("action");

                    b.Property<string>("Alarm")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alarm_record_status");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<string>("CancelBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cancel_by");

                    b.Property<DateTime>("CancelTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("cancel_timestamp");

                    b.Property<string>("DoneBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("done_by");

                    b.Property<DateTime>("DoneTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("done_timestamp");

                    b.Property<Guid>("FloorplanMaskedAreaId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floorplan_masked_area_id");

                    b.Property<Guid?>("FloorplanMaskedAreaId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<string>("IdleBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("idle_by");

                    b.Property<DateTime>("IdleTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("idle_timestamp");

                    b.Property<string>("InvestigatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("investigated_by");

                    b.Property<DateTime>("InvestigatedDoneAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("investigated_done_at");

                    b.Property<string>("InvestigatedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("investigated_result");

                    b.Property<DateTime>("InvestigatedTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("investigated_timestamp");

                    b.Property<Guid?>("MstBleReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ble_reader_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("VisitorId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("visitor_id");

                    b.Property<Guid?>("VisitorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WaitingBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("waiting_by");

                    b.Property<DateTime>("WaitingTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("waiting_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("FloorplanMaskedAreaId")
                        .IsUnique();

                    b.HasIndex("FloorplanMaskedAreaId1");

                    b.HasIndex("Generate")
                        .IsUnique()
                        .HasDatabaseName("alarm_record_tracking__generate_unique");

                    b.HasIndex("MstBleReaderId");

                    b.HasIndex("ReaderId")
                        .IsUnique();

                    b.HasIndex("VisitorId")
                        .IsUnique();

                    b.HasIndex("VisitorId1");

                    b.ToTable("alarm_record_tracking", (string)null);
                });

            modelBuilder.Entity("Entities.Models.BleReaderNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<float>("Distance")
                        .HasMaxLength(255)
                        .HasColumnType("real")
                        .HasColumnName("distance");

                    b.Property<float>("DistancePx")
                        .HasMaxLength(255)
                        .HasColumnType("real")
                        .HasColumnName("distance_px");

                    b.Property<string>("EndPos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("end_pos");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid?>("ReaderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ble_reader_id");

                    b.Property<string>("StartPos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("start_pos");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Generate")
                        .IsUnique();

                    b.HasIndex("ReaderId");

                    b.ToTable("ble_reader_node", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CardBarcode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("card_barcode");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("card_number");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<bool?>("IsMultiSite")
                        .HasColumnType("bit")
                        .HasColumnName("is_multi_site");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<string>("LastUsed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_used_by");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RegisteredSite")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("registered_site");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<bool?>("StatusCard")
                        .HasColumnType("bit")
                        .HasColumnName("status_card");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("card", (string)null);
                });

            modelBuilder.Entity("Entities.Models.CardRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CheckinAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checkin_at");

                    b.Property<string>("CheckinBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("checkin_by");

                    b.Property<Guid?>("CheckinSiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("checkin_site_id");

                    b.Property<DateTime?>("CheckoutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checkout_at");

                    b.Property<string>("CheckoutBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("checkout_by");

                    b.Property<Guid?>("CheckoutSiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("checkout_site_id");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_id");

                    b.Property<Guid?>("MstMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<Guid>("VisitorCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("visitor_card_id");

                    b.Property<Guid?>("VisitorCardId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("visitor_id");

                    b.Property<Guid?>("VisitorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VisitorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("visitor_type");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MstMemberId");

                    b.HasIndex("VisitorCardId");

                    b.HasIndex("VisitorCardId1");

                    b.HasIndex("VisitorId");

                    b.HasIndex("VisitorId1");

                    b.ToTable("card_record", (string)null);
                });

            modelBuilder.Entity("Entities.Models.FloorplanDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccessCctvId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("access_cctv_id");

                    b.Property<Guid>("AccessControlId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("access_control_id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("DeviceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("device_status");

                    b.Property<Guid>("FloorplanId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floorplan_id");

                    b.Property<Guid>("FloorplanMaskedAreaId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floorplan_masked_area_id");

                    b.Property<Guid?>("FloorplanMaskedAreaId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid?>("MstAccessCctvId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstAccessControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstBleReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<float>("PosPxX")
                        .HasColumnType("real")
                        .HasColumnName("pos_px_x");

                    b.Property<float>("PosPxY")
                        .HasColumnType("real")
                        .HasColumnName("pos_px_y");

                    b.Property<float>("PosX")
                        .HasColumnType("real")
                        .HasColumnName("pos_x");

                    b.Property<float>("PosY")
                        .HasColumnType("real")
                        .HasColumnName("pos_y");

                    b.Property<Guid>("ReaderId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ble_reader_id");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AccessCctvId");

                    b.HasIndex("AccessControlId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("FloorplanId");

                    b.HasIndex("FloorplanMaskedAreaId");

                    b.HasIndex("FloorplanMaskedAreaId1");

                    b.HasIndex("Generate")
                        .IsUnique();

                    b.HasIndex("MstAccessCctvId");

                    b.HasIndex("MstAccessControlId");

                    b.HasIndex("MstApplicationId");

                    b.HasIndex("MstBleReaderId");

                    b.HasIndex("ReaderId");

                    b.ToTable("floorplan_device", (string)null);
                });

            modelBuilder.Entity("Entities.Models.FloorplanMaskedArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AreaShape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("area_shape");

                    b.Property<string>("ColorArea")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("color_area");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("EngineAreaId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("engine_area_id");

                    b.Property<Guid>("FloorId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floor_id");

                    b.Property<Guid>("FloorplanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floorplan_id");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<Guid?>("MstFloorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("RestrictedStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("restricted_status");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("FloorplanId");

                    b.HasIndex("MstFloorId");

                    b.ToTable("floorplan_masked_area", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstAccessCctv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid>("IntegrationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("integration_id");

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Rtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rtsp");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("IntegrationId");

                    b.HasIndex("MstApplicationId");

                    b.ToTable("mst_access_cctv", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstAccessControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("channel");

                    b.Property<Guid>("ControllerBrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("controller_brand_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("DoorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("door_id");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid>("IntegrationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("integration_id");

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Raw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("raw");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ControllerBrandId");

                    b.HasIndex("IntegrationId");

                    b.HasIndex("MstApplicationId");

                    b.ToTable("mst_access_control", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationCustomDomain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("application_custom_domain");

                    b.Property<string>("ApplicationCustomName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("application_custom_name");

                    b.Property<string>("ApplicationCustomPort")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("application_custom_port");

                    b.Property<DateTime>("ApplicationExpired")
                        .HasColumnType("datetime2")
                        .HasColumnName("application_expired");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("application_name");

                    b.Property<DateTime>("ApplicationRegistered")
                        .HasColumnType("datetime2")
                        .HasColumnName("application_registered");

                    b.Property<int?>("ApplicationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("application_status");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("")
                        .HasColumnName("application_type");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<string>("HostAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("host_address");

                    b.Property<string>("HostEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("host_email");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("host_name");

                    b.Property<string>("HostPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("host_phone");

                    b.Property<string>("LicenseCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("license_code");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("license_type");

                    b.Property<string>("OrganizationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("organization_address");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("Single")
                        .HasColumnName("organization_type");

                    b.HasKey("Id");

                    b.ToTable("mst_application", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstBleReader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BrandId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("brand_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("EngineReaderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("engine_reader_id");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<string>("Gmac")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gmac");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ip");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("mst_ble_reader", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.ToTable("mst_brand", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstBuilding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstBuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Generate")
                        .IsUnique();

                    b.HasIndex("MstApplicationId");

                    b.HasIndex("MstBuildingId");

                    b.ToTable("mst_building", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("DepartmentHost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("department_host");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MstApplicationId");

                    b.ToTable("mst_department", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("DistrictHost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("district_host");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MstApplicationId");

                    b.ToTable("mst_district", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstEngine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("EngineId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("engine_id");

                    b.Property<int?>("IsLive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("is_live");

                    b.Property<DateTime>("LastLive")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_live");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("port");

                    b.Property<string>("ServiceStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("service_status");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("mst_engine", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstFloor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BuildingId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("building_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<long>("EngineFloorId")
                        .HasColumnType("bigint")
                        .HasColumnName("engine_floor_id");

                    b.Property<string>("FloorImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("floor_image");

                    b.Property<float>("FloorX")
                        .HasColumnType("real")
                        .HasColumnName("floor_x");

                    b.Property<float>("FloorY")
                        .HasColumnType("real")
                        .HasColumnName("floor_y");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<float>("MeterPerPx")
                        .HasColumnType("real")
                        .HasColumnName("meter_per_px");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<float>("PixelX")
                        .HasColumnType("real")
                        .HasColumnName("pixel_x");

                    b.Property<float>("PixelY")
                        .HasColumnType("real")
                        .HasColumnName("pixel_y");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("mst_floor", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstFloorplan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("FloorId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floor_id");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstFloorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("FloorId");

                    b.HasIndex("Generate")
                        .IsUnique();

                    b.HasIndex("MstApplicationId");

                    b.HasIndex("MstFloorId");

                    b.ToTable("mst_floorplan", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstIntegration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ApiAuthPasswd")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_auth_passwd");

                    b.Property<string>("ApiAuthUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_auth_username");

                    b.Property<string>("ApiKeyField")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_key_field");

                    b.Property<string>("ApiKeyValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_key_value");

                    b.Property<string>("ApiTypeAuth")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("api_type_auth");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("api_url");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<Guid>("BrandId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("brand_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<string>("IntegrationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("integration_type");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BrandId");

                    b.ToTable("mst_integration", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("BleCardNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ble_card_number");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("card_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<Guid>("DistrictId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<DateOnly>("ExitDate")
                        .HasColumnType("date")
                        .HasColumnName("exit_date");

                    b.Property<string>("FaceImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("face_image");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gender");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<string>("HeadMember1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("head_member1");

                    b.Property<string>("HeadMember2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("head_member2");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("identity_id");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstDistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("person_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("StatusEmployee")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status_employee");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.Property<int>("UploadFr")
                        .HasColumnType("int")
                        .HasColumnName("upload_fr");

                    b.Property<string>("UploadFrError")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("upload_fr_error");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Email");

                    b.HasIndex("MstApplicationId");

                    b.HasIndex("MstDepartmentId");

                    b.HasIndex("MstDistrictId");

                    b.HasIndex("MstOrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("mst_member", (string)null);
                });

            modelBuilder.Entity("Entities.Models.MstOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Generate"));

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationHost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organization_host");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MstApplicationId");

                    b.ToTable("mst_organization", (string)null);
                });

            modelBuilder.Entity("Entities.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiry_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TrackingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AlarmStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alarm_status");

                    b.Property<long>("Battery")
                        .HasColumnType("bigint")
                        .HasColumnName("battery");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<float>("CoordinatePxX")
                        .HasColumnType("real")
                        .HasColumnName("coordinate_px_x");

                    b.Property<float>("CoordinatePxY")
                        .HasColumnType("real")
                        .HasColumnName("coordinate_px_y");

                    b.Property<float>("CoordinateX")
                        .HasColumnType("real")
                        .HasColumnName("coordinate_x");

                    b.Property<float>("CoordinateY")
                        .HasColumnType("real")
                        .HasColumnName("coordinate_y");

                    b.Property<Guid>("FloorplanMaskedAreaId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floorplan_masked_area_id");

                    b.Property<Guid?>("FloorplanMaskedAreaId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MstBleReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reader_id");

                    b.Property<DateTime>("TransTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("trans_time");

                    b.HasKey("Id");

                    b.HasIndex("FloorplanMaskedAreaId");

                    b.HasIndex("FloorplanMaskedAreaId1");

                    b.HasIndex("MstBleReaderId");

                    b.HasIndex("ReaderId");

                    b.ToTable("tracking_transaction", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TrxVisitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("BlockAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("block_at");

                    b.Property<string>("BlockBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("block_by");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("block_reason");

                    b.Property<DateTime>("CheckedInAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checked_in_at");

                    b.Property<DateTime>("CheckedOutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checked_out_at");

                    b.Property<string>("CheckinBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("checkin_by");

                    b.Property<string>("CheckoutBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("checkout_by");

                    b.Property<DateTime>("DenyAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deny_at");

                    b.Property<string>("DenyBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deny_by");

                    b.Property<string>("DenyReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deny_reason");

                    b.Property<DateTime>("InvitationCreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("invitation_created_at");

                    b.Property<string>("ParkingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parking_id");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("site_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("visitor_type");

                    b.Property<DateTime>("UnblockAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("unblock_at");

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vehicle_plate_number");

                    b.Property<string>("VisitorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("visitor_code");

                    b.Property<long>("VisitorGroupCode")
                        .HasColumnType("bigint")
                        .HasColumnName("visitor_group_code");

                    b.Property<Guid>("VisitorId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("visitor_id");

                    b.Property<string>("VisitorNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("visitor_number");

                    b.HasKey("Id");

                    b.HasIndex("VisitorId");

                    b.ToTable("trx_visitor", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("EmailConfirmationAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("email_confirmation_at");

                    b.Property<string>("EmailConfirmationCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email_confirmation_code");

                    b.Property<DateTime>("EmailConfirmationExpiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("email_confirmation_expired_at");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.Property<int>("IsCreatedPassword")
                        .HasColumnType("int")
                        .HasColumnName("is_created_password");

                    b.Property<int>("IsEmailConfirmation")
                        .HasColumnType("int")
                        .HasColumnName("is_email_confirmation");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("StatusActive")
                        .HasColumnType("int")
                        .HasColumnName("status_active");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("LevelPriority")
                        .HasColumnType("int")
                        .HasColumnName("level_priority");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("user_group", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<Guid>("ApplicationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<string>("BleCardNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ble_card_number");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("card_number");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<Guid>("DistrictId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("EmailVerficationSendAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("email_verification_send_at");

                    b.Property<string>("EmailVerificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_verification_token");

                    b.Property<string>("FaceImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("face_image");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gender");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_email_vervied");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit")
                        .HasColumnName("is_employee");

                    b.Property<bool>("IsVip")
                        .HasColumnType("bit")
                        .HasColumnName("is_vip");

                    b.Property<Guid?>("MstApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("person_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UploadFr")
                        .HasColumnType("int")
                        .HasColumnName("upload_fr");

                    b.Property<string>("UploadFrError")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("upload_fr_error");

                    b.Property<DateTime>("VisitorPeriodEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("visitor_period_end");

                    b.Property<DateTime>("VisitorPeriodStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("visitor_period_start");

                    b.Property<string>("VisitorType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("visitor_type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Email");

                    b.HasIndex("MstApplicationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("visitor", (string)null);
                });

            modelBuilder.Entity("Entities.Models.VisitorBlacklistArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("FloorplanMaskedAreaId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("floorplan_masked_area_id");

                    b.Property<Guid?>("FloorplanMaskedAreaId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<Guid>("VisitorId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("visitor_id");

                    b.Property<Guid?>("VisitorId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FloorplanMaskedAreaId");

                    b.HasIndex("FloorplanMaskedAreaId1");

                    b.HasIndex("VisitorId");

                    b.HasIndex("VisitorId1");

                    b.ToTable("visitor_blacklist_area", (string)null);
                });

            modelBuilder.Entity("Entities.Models.VisitorCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("application_id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("card_id");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("card_type");

                    b.Property<int?>("CheckinStatus")
                        .HasColumnType("int")
                        .HasColumnName("checkin_status");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int?>("EnableStatus")
                        .HasColumnType("int")
                        .HasColumnName("enable_status");

                    b.Property<long>("Generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("_generate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Generate"));

                    b.Property<int?>("IsVisitor")
                        .HasColumnType("int")
                        .HasColumnName("is_visitor");

                    b.Property<string>("Mac")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mac");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("number");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("qr_code");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("site_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("VisitorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("visitor_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CardId");

                    b.HasIndex("MemberId");

                    b.HasIndex("VisitorId");

                    b.ToTable("visitor_card", (string)null);
                });

            modelBuilder.Entity("Entities.Models.AlarmRecordTracking", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithOne("AlarmRecordTracking")
                        .HasForeignKey("Entities.Models.AlarmRecordTracking", "ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.FloorplanMaskedArea", "FloorplanMaskedArea")
                        .WithOne("AlarmRecordTracking")
                        .HasForeignKey("Entities.Models.AlarmRecordTracking", "FloorplanMaskedAreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.FloorplanMaskedArea", null)
                        .WithMany("AlarmRecordTrackings")
                        .HasForeignKey("FloorplanMaskedAreaId1");

                    b.HasOne("Entities.Models.MstBleReader", null)
                        .WithMany("AlarmRecordTrackings")
                        .HasForeignKey("MstBleReaderId");

                    b.HasOne("Entities.Models.MstBleReader", "Reader")
                        .WithOne("AlarmRecordTracking")
                        .HasForeignKey("Entities.Models.AlarmRecordTracking", "ReaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Visitor", "Visitor")
                        .WithOne("AlarmRecordTracking")
                        .HasForeignKey("Entities.Models.AlarmRecordTracking", "VisitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Visitor", null)
                        .WithMany("AlarmRecordTrackings")
                        .HasForeignKey("VisitorId1");

                    b.Navigation("Application");

                    b.Navigation("FloorplanMaskedArea");

                    b.Navigation("Reader");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Entities.Models.BleReaderNode", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstBleReader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Entities.Models.CardRecord", b =>
                {
                    b.HasOne("Entities.Models.MstMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Models.MstMember", null)
                        .WithMany("CardRecords")
                        .HasForeignKey("MstMemberId");

                    b.HasOne("Entities.Models.VisitorCard", "VisitorCard")
                        .WithMany()
                        .HasForeignKey("VisitorCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.VisitorCard", null)
                        .WithMany("CardRecords")
                        .HasForeignKey("VisitorCardId1");

                    b.HasOne("Entities.Models.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Models.Visitor", null)
                        .WithMany("CardRecords")
                        .HasForeignKey("VisitorId1");

                    b.Navigation("Member");

                    b.Navigation("Visitor");

                    b.Navigation("VisitorCard");
                });

            modelBuilder.Entity("Entities.Models.FloorplanDevice", b =>
                {
                    b.HasOne("Entities.Models.MstAccessCctv", "AccessCctv")
                        .WithMany()
                        .HasForeignKey("AccessCctvId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstAccessControl", "AccessControl")
                        .WithMany()
                        .HasForeignKey("AccessControlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstFloorplan", "Floorplan")
                        .WithMany("FloorplanDevices")
                        .HasForeignKey("FloorplanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.FloorplanMaskedArea", "FloorplanMaskedArea")
                        .WithMany()
                        .HasForeignKey("FloorplanMaskedAreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.FloorplanMaskedArea", null)
                        .WithMany("FloorplanDevices")
                        .HasForeignKey("FloorplanMaskedAreaId1");

                    b.HasOne("Entities.Models.MstAccessCctv", null)
                        .WithMany("FloorplanDevices")
                        .HasForeignKey("MstAccessCctvId");

                    b.HasOne("Entities.Models.MstAccessControl", null)
                        .WithMany("FloorplanDevices")
                        .HasForeignKey("MstAccessControlId");

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("FloorplanDevices")
                        .HasForeignKey("MstApplicationId");

                    b.HasOne("Entities.Models.MstBleReader", null)
                        .WithMany("FloorplanDevices")
                        .HasForeignKey("MstBleReaderId");

                    b.HasOne("Entities.Models.MstBleReader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccessCctv");

                    b.Navigation("AccessControl");

                    b.Navigation("Application");

                    b.Navigation("Floorplan");

                    b.Navigation("FloorplanMaskedArea");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Entities.Models.FloorplanMaskedArea", b =>
                {
                    b.HasOne("Entities.Models.MstFloor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstFloorplan", "Floorplan")
                        .WithMany("FloorplanMaskedAreas")
                        .HasForeignKey("FloorplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstFloor", null)
                        .WithMany("FloorplanMaskedAreas")
                        .HasForeignKey("MstFloorId");

                    b.Navigation("Floor");

                    b.Navigation("Floorplan");
                });

            modelBuilder.Entity("Entities.Models.MstAccessCctv", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstIntegration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("AccessCctvs")
                        .HasForeignKey("MstApplicationId");

                    b.Navigation("Application");

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("Entities.Models.MstAccessControl", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("ControllerBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstIntegration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("AccessControls")
                        .HasForeignKey("MstApplicationId");

                    b.Navigation("Application");

                    b.Navigation("Brand");

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("Entities.Models.MstBleReader", b =>
                {
                    b.HasOne("Entities.Models.MstBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Entities.Models.MstBuilding", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Buildings")
                        .HasForeignKey("MstApplicationId");

                    b.HasOne("Entities.Models.MstBuilding", null)
                        .WithMany("Buildings")
                        .HasForeignKey("MstBuildingId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Entities.Models.MstDepartment", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Departments")
                        .HasForeignKey("MstApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Entities.Models.MstDistrict", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Districts")
                        .HasForeignKey("MstApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Entities.Models.MstFloor", b =>
                {
                    b.HasOne("Entities.Models.MstBuilding", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Entities.Models.MstFloorplan", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstFloor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Floorplans")
                        .HasForeignKey("MstApplicationId");

                    b.HasOne("Entities.Models.MstFloor", null)
                        .WithMany("Floorplans")
                        .HasForeignKey("MstFloorId");

                    b.Navigation("Application");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("Entities.Models.MstIntegration", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany("Integrations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Entities.Models.MstMember", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Members")
                        .HasForeignKey("MstApplicationId");

                    b.HasOne("Entities.Models.MstDepartment", null)
                        .WithMany("Members")
                        .HasForeignKey("MstDepartmentId");

                    b.HasOne("Entities.Models.MstDistrict", null)
                        .WithMany("Members")
                        .HasForeignKey("MstDistrictId");

                    b.HasOne("Entities.Models.MstOrganization", null)
                        .WithMany("Members")
                        .HasForeignKey("MstOrganizationId");

                    b.HasOne("Entities.Models.MstOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Entities.Models.MstOrganization", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Organizations")
                        .HasForeignKey("MstApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Entities.Models.RefreshToken", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TrackingTransaction", b =>
                {
                    b.HasOne("Entities.Models.FloorplanMaskedArea", "FloorplanMaskedArea")
                        .WithMany()
                        .HasForeignKey("FloorplanMaskedAreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.FloorplanMaskedArea", null)
                        .WithMany("TrackingTransactions")
                        .HasForeignKey("FloorplanMaskedAreaId1");

                    b.HasOne("Entities.Models.MstBleReader", null)
                        .WithMany("TrackingTransactions")
                        .HasForeignKey("MstBleReaderId");

                    b.HasOne("Entities.Models.MstBleReader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FloorplanMaskedArea");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Entities.Models.TrxVisitor", b =>
                {
                    b.HasOne("Entities.Models.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.UserGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.UserGroup", null)
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Entities.Models.UserGroup", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Entities.Models.Visitor", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstApplication", null)
                        .WithMany("Visitors")
                        .HasForeignKey("MstApplicationId");

                    b.HasOne("Entities.Models.MstOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Entities.Models.VisitorBlacklistArea", b =>
                {
                    b.HasOne("Entities.Models.FloorplanMaskedArea", "FloorplanMaskedArea")
                        .WithMany()
                        .HasForeignKey("FloorplanMaskedAreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.FloorplanMaskedArea", null)
                        .WithMany("BlacklistAreas")
                        .HasForeignKey("FloorplanMaskedAreaId1");

                    b.HasOne("Entities.Models.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Visitor", null)
                        .WithMany("BlacklistAreas")
                        .HasForeignKey("VisitorId1");

                    b.Navigation("FloorplanMaskedArea");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Entities.Models.VisitorCard", b =>
                {
                    b.HasOne("Entities.Models.MstApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.MstMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Models.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("Card");

                    b.Navigation("Member");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Entities.Models.FloorplanMaskedArea", b =>
                {
                    b.Navigation("AlarmRecordTracking")
                        .IsRequired();

                    b.Navigation("AlarmRecordTrackings");

                    b.Navigation("BlacklistAreas");

                    b.Navigation("FloorplanDevices");

                    b.Navigation("TrackingTransactions");
                });

            modelBuilder.Entity("Entities.Models.MstAccessCctv", b =>
                {
                    b.Navigation("FloorplanDevices");
                });

            modelBuilder.Entity("Entities.Models.MstAccessControl", b =>
                {
                    b.Navigation("FloorplanDevices");
                });

            modelBuilder.Entity("Entities.Models.MstApplication", b =>
                {
                    b.Navigation("AccessCctvs");

                    b.Navigation("AccessControls");

                    b.Navigation("AlarmRecordTracking")
                        .IsRequired();

                    b.Navigation("Buildings");

                    b.Navigation("Departments");

                    b.Navigation("Districts");

                    b.Navigation("FloorplanDevices");

                    b.Navigation("Floorplans");

                    b.Navigation("Integrations");

                    b.Navigation("Members");

                    b.Navigation("Organizations");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("Entities.Models.MstBleReader", b =>
                {
                    b.Navigation("AlarmRecordTracking")
                        .IsRequired();

                    b.Navigation("AlarmRecordTrackings");

                    b.Navigation("FloorplanDevices");

                    b.Navigation("TrackingTransactions");
                });

            modelBuilder.Entity("Entities.Models.MstBuilding", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Entities.Models.MstDepartment", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Entities.Models.MstDistrict", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Entities.Models.MstFloor", b =>
                {
                    b.Navigation("FloorplanMaskedAreas");

                    b.Navigation("Floorplans");
                });

            modelBuilder.Entity("Entities.Models.MstFloorplan", b =>
                {
                    b.Navigation("FloorplanDevices");

                    b.Navigation("FloorplanMaskedAreas");
                });

            modelBuilder.Entity("Entities.Models.MstMember", b =>
                {
                    b.Navigation("CardRecords");
                });

            modelBuilder.Entity("Entities.Models.MstOrganization", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Entities.Models.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.Visitor", b =>
                {
                    b.Navigation("AlarmRecordTracking")
                        .IsRequired();

                    b.Navigation("AlarmRecordTrackings");

                    b.Navigation("BlacklistAreas");

                    b.Navigation("CardRecords");
                });

            modelBuilder.Entity("Entities.Models.VisitorCard", b =>
                {
                    b.Navigation("CardRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
